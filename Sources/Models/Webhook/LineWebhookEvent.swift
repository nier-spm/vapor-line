import Foundation

// MARK: - [ Protocol ] LineWebhookEvent
/**
 [WebhookEventObjects]: https://developers.line.biz/en/reference/messaging-api/#webhook-event-objects
 
 These are JSON objects containing events generated by the LINE platform.
 
 Some properties of these event objects may lack a value. Generated event objects don't contain properties without any value.
 
 The structure of these event objects may change when the Messaging API feature is updated. Such changes can include adding properties, changing the order of properties, adding or deleting spaces and newlines between data elements, and so on. Implement your server to succeed in receiving event objects whose structure has changed in the future.
 
 # Reference
 [Webhook Event Objects | LINE Developers][WebhookEventObjects]
 
 The following properties are found in webhook event objects.
 
 - `type`: Identifier for the type of event/
 - `mode`: Channel state. See **LineWebhookEventMode**.
 - `timestamp`: Time of the event in milliseconds.
 - `source`: See **LineWebhookEventSource**.
 */
public protocol LineWebhookEvent {
    var type: LineWebhookEventType { get }
    var mode: LineWebhookEventMode { get }
    var timestamp: Double { get }
    var source: LineWebhookEventSource { get }
}

extension LineWebhookEvent {
    
    /// - `time`: Standard date string from `timestamp`
    public var time: Date {
        return Date(timeIntervalSince1970: self.timestamp / 1000)
    }
}

// MARK: - LineWebhookEventType
/**
 - `message`
 - `unsend`
 - `follow`
 - `unfollow`
 - `join`
 - `leave`
 - `memberJoin (memberJoined)`
 - `memberLeave (memberLeft)`
 - `postback`
 - `videoPlayComplete`
 - `beacon`
 - `accountLink`
 - `things`
 */
public enum LineWebhookEventType: String, Codable {
    case message
    case unsend
    case follow
    case unfollow
    case join
    case leave
    case memberJoin = "memberJoined"
    case memberLeave = "memberLeft"
    case postback
    case videoPlayComplete
    case beacon
    case accountLink
    case things
}

// MARK: - LineWebhookEventMode
/**
 - `active`: The channel is active. You can send a reply message or push message from the bot server that received this webhook event.
 - `standby` (under development): The channel is waiting. The bot server that received this webhook event shouldn't send any messages.
 */
public enum LineWebhookEventMode: String, Codable {
    case active
    case standby
}

// MARK: - LineWebhookEventPrototype
struct LineWebhookEventPrototype: LineWebhookEvent, Codable {
    
    var type: LineWebhookEventType
    var mode: LineWebhookEventMode
    var timestamp: Double
    var source: LineWebhookEventSource
    
    enum CodingKeys: String, CodingKey {
        case type
        case mode
        case timestamp
        case source
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        self.type = try container.decode(LineWebhookEventType.self, forKey: .type)
        self.mode = try container.decode(LineWebhookEventMode.self, forKey: .mode)
        self.timestamp = try container.decode(Double.self, forKey: .timestamp)
        
        let source = try container.decode(LineWebhookEventSourcePrototype.self, forKey: .source)
        
        switch source.type {
        case .user:
            self.source = try container.decode(LineWebhookEventUserSource.self, forKey: .source)
        case .group:
            self.source = try container.decode(LineWebhookEventGroupSource.self, forKey: .source)
        case .room:
            self.source = try container.decode(LineWebhookEventRoomSource.self, forKey: .source)
        }
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(self.type, forKey: .type)
        try container.encode(self.mode, forKey: .mode)
        try container.encode(self.timestamp, forKey: .timestamp)
        
        switch self.source.type {
        case .user:
            let user: LineWebhookEventUserSource = self.source as! LineWebhookEventUserSource
            try container.encode(user, forKey: .source)
        case .group:
            let group: LineWebhookEventGroupSource = self.source as! LineWebhookEventGroupSource
            try container.encode(group, forKey: .source)
        case .room:
            let room: LineWebhookEventRoomSource = self.source as! LineWebhookEventRoomSource
            try container.encode(room, forKey: .source)
        }
    }
}
